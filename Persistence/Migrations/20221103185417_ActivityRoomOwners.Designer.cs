// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221103185417_ActivityRoomOwners")]
    partial class ActivityRoomOwners
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionOfficer")
                        .HasColumnType("text");

                    b.Property<string>("ActionOfficerPhone")
                        .HasColumnType("text");

                    b.Property<bool>("AllDayEvent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoordinatorEmail")
                        .HasColumnType("text");

                    b.Property<string>("CoordinatorName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventLookup")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimaryLocation")
                        .HasColumnType("text");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RecurrenceInd")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RecurrenceId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.ActivityRoomOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("text");

                    b.Property<string>("RoomEmail")
                        .HasColumnType("text");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActivityRoomOwners");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Domain.Recurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DayOfMonth")
                        .HasColumnType("text");

                    b.Property<string>("DaysRepeating")
                        .HasColumnType("text");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeWeekends")
                        .HasColumnType("boolean");

                    b.Property<string>("Interval")
                        .HasColumnType("text");

                    b.Property<DateTime>("IntervalEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IntervalStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<string>("MonthlyDayType")
                        .HasColumnType("text");

                    b.Property<string>("MonthlyRepeatType")
                        .HasColumnType("text");

                    b.Property<string>("MonthsRepeating")
                        .HasColumnType("text");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.Property<string>("WeekInterval")
                        .HasColumnType("text");

                    b.Property<string>("WeekOfMonth")
                        .HasColumnType("text");

                    b.Property<string>("WeekdayOfMonth")
                        .HasColumnType("text");

                    b.Property<string>("WeekendsIncluded")
                        .HasColumnType("text");

                    b.Property<string>("WeeklyRepeatType")
                        .HasColumnType("text");

                    b.Property<string>("WeeksRepeating")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recurrences");
                });

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Organization", "Organization")
                        .WithMany("Activities")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Domain.Recurrence", "Recurrence")
                        .WithMany("Activities")
                        .HasForeignKey("RecurrenceId");

                    b.Navigation("Category");

                    b.Navigation("Organization");

                    b.Navigation("Recurrence");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Domain.Organization", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Domain.Recurrence", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
